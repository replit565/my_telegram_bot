#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è Railway —Å —Ä–∞–±–æ—Ç–æ–π 24/7
"""
import asyncio
import logging
import os
import time
from datetime import datetime
from flask import Flask, jsonify
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import random

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
PORT = int(os.environ.get('PORT', 8080))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°—á–µ—Ç—á–∏–∫–∏
start_time = time.time()
message_count = 0

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Railway
app = Flask(__name__)

@app.route('/')
def home():
    uptime = time.time() - start_time
    return f"""
    <html>
    <head><title>Mines Signal Bot</title></head>
    <body style="background:#000;color:#0f0;font-family:monospace;text-align:center;padding:50px;">
        <h1>üéØ Mines Signal Bot Active</h1>
        <p>Bot: @Mines_ChatGPT_signal_bot</p>
        <p>Uptime: {uptime:.0f} seconds</p>
        <p>Messages: {message_count}</p>
        <p>Status: ‚úÖ Online 24/7</p>
        <p>Platform: Railway.app</p>
        <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </body>
    </html>
    """

@app.route('/health')
def health():
    return jsonify({
        "status": "healthy",
        "bot": "Mines_ChatGPT_signal_bot",
        "uptime": time.time() - start_time,
        "messages": message_count,
        "platform": "railway",
        "timestamp": datetime.now().isoformat()
    })

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    global message_count
    message_count += 1
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üéØ English", callback_data="lang_en")],
        [types.InlineKeyboardButton(text="üéØ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]
    ])
    
    await message.answer(
        "üéØ Welcome to Mines Signal Bot!\n"
        "Choose your language:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('lang_'))
async def set_language(callback: types.CallbackQuery):
    lang = callback.data.split('_')[1]
    
    if lang == 'ru':
        text = """üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mines Signal Bot!

üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: https://1wxxlb.com/v3/aggressive-casino/list?p=ziuo
2Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–∏–Ω–∏–º—É–º 100‚ÇΩ
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞

üéÆ –ü–æ–ª—É—á–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–≥—Ä—ã Mines!
‚ú® –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –Ω–∞ Railway.app"""
    else:
        text = """üéØ Welcome to Mines Signal Bot!

üì± Registration:
1Ô∏è‚É£ Register: https://1wxxlb.com/v3/aggressive-casino/list?p=ziuo
2Ô∏è‚É£ Deposit minimum 100‚ÇΩ
3Ô∏è‚É£ Send your ID after deposit

üéÆ Get accurate signals for Mines game!
‚ú® Running 24/7 on Railway.app"""
    
    await callback.message.edit_text(text)

@dp.message(Command("signal"))
async def send_signal(message: types.Message):
    global message_count
    message_count += 1
    
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–≥–Ω–∞–ª–∞ (1-12)
    signal_num = random.randint(1, 12)
    mines_count = random.randint(3, 7)
    
    await message.answer(f"üéØ SIGNAL #{signal_num}\nüí£ Mines: {mines_count}\nüéÆ Good luck!")

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    global message_count
    message_count += 1
    
    uptime = time.time() - start_time
    await message.answer(
        f"üìä Bot Status\n"
        f"‚è±Ô∏è Uptime: {uptime:.0f}s\n"
        f"üì± Messages: {message_count}\n"
        f"üü¢ Status: Online 24/7\n"
        f"üöÄ Platform: Railway.app"
    )

@dp.message()
async def handle_message(message: types.Message):
    global message_count
    message_count += 1
    
    if message.text and message.text.isdigit():
        await message.answer("‚úÖ ID –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞.")
    else:
        await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting Telegram bot...")
    await dp.start_polling(bot)

def start_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info(f"Starting Mines Signal Bot on port {PORT}")
    logger.info("Railway.app deployment - 24/7 operation")
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=start_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await start_bot()

if __name__ == "__main__":
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable not set")
        exit(1)
    
    asyncio.run(main())
