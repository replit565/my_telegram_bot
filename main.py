import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command
from datetime import datetime
import pytz
import os
import random
import logging
from flask import Flask
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
API_TOKEN = os.getenv('BOT_TOKEN', '8143505253:AAFxhvbvIZK4Bp4aLGJw6hH5yufzWyAOL3Q')
PORT = int(os.environ.get('PORT', 8080))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_ids = set()
user_language = {}
confirmed_users = set()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return f"""
    <html>
    <head><title>Mines Signal Bot</title></head>
    <body style="background:#000;color:#0f0;font-family:monospace;text-align:center;padding:50px;">
        <h1>üéØ Mines Signal Bot Active</h1>
        <p>Bot: @Mines_ChatGPT_signal_bot</p>
        <p>Status: ‚úÖ Online 24/7</p>
        <p>Platform: Render.com</p>
        <p>Users: {len(confirmed_users)} confirmed</p>
    </body>
    </html>
    """

@app.route('/health')
def health():
    return {"status": "healthy", "bot": "active"}

# --- –ö–Ω–æ–ø–∫–∏ ---
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), KeyboardButton(text="üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
    [KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="‚ö†Ô∏è –í–∞–∂–Ω–æ–µ!")],
    [KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")]
], resize_keyboard=True)

deposit_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"), KeyboardButton(text="‚úÖ –Ø –ø–æ–ø–æ–ª–Ω–∏–ª")]
], resize_keyboard=True)

language_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–†—É—Å—Å–∫–∏–π"), KeyboardButton(text="English")]
], resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select your language:",
        reply_markup=language_menu
    )

# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ---
@dp.message(lambda message: message.text in ["–†—É—Å—Å–∫–∏–π", "English"])
async def set_language(message: types.Message):
    lang = "ru" if message.text == "–†—É—Å—Å–∫–∏–π" else "en"
    user_language[message.from_user.id] = lang
    await message.answer(
        "‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" if lang == "ru" else "‚úÖ Language selected. Welcome!",
        reply_markup=main_menu
    )

# --- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ---
@dp.message(lambda message: message.text == "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction(message: types.Message):
    lang = user_language.get(message.from_user.id, "ru")
    text = (
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: MONETKA50\n"
        "3. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç –æ—Ç 1000 —Ä—É–±\n"
        "4. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π ID"
    ) if lang == "ru" else (
        "1. Follow the link\n"
        "2. Enter promo code: MONETKA50\n"
        "3. Deposit at least 1000 RUB\n"
        "4. Enter your ID"
    )
    await message.answer(text)

# --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ---
@dp.message(lambda message: message.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üì© –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @kaznet20")

# --- –í–∞–∂–Ω–æ–µ ---
@dp.message(lambda message: message.text == "‚ö†Ô∏è –í–∞–∂–Ω–æ–µ!")
async def important(message: types.Message):
    await message.answer(
        "‚ùóÔ∏è–ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –æ—Ç 1WIN, –∏–≥—Ä–∞–π—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é 5 –∏–≥—Ä—É –∏–ª–∏ 6 –∏–≥—Ä—É –≤ Mines.\n\n"
        "‚ùó–ü–æ—á–µ–º—É? –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ø–∞–¥—ë—Ç –ø–æ–¥ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ. "
        "–ï—Å–ª–∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –Ω–∞–π–¥—É—Ç —Å–æ—Ñ—Ç ‚Äî –ª–∞–≤–æ—á–∫–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è!\n\n"
        "‚ö†Ô∏è –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–≤–æ–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞!"
    )

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.message(lambda message: message.text == "üì• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration(message: types.Message):
    lang = user_language.get(message.from_user.id, "ru")
    text = (
        "üé∞ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "https://1wilib.life/v3/aggressive-casino?p=as47\n\n"
        "üßæ –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –í–í–ï–î–ò–¢–ï –ü–†–û–ú–û–ö–û–î: MONETKA50\n\n"
        "‚ùóÔ∏è –°–¢–†–û–ì–û –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢ 1WIN! üí•\n\n"
        "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π ID:"
    ) if lang == "ru" else (
        "üé∞ Register here:\n"
        "https://1wilib.life/v3/aggressive-casino?p=as47\n\n"
        "üßæ USE PROMO CODE: MONETKA50\n\n"
        "‚ùóÔ∏è STRICTLY NEW 1WIN ACCOUNT! üí•\n\n"
        "‚úçÔ∏è Enter your ID:"
    )
    await message.answer(text)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ ID ---
@dp.message(lambda message: message.text and message.text.isdigit() and len(message.text) >= 4)
async def save_id(message: types.Message):
    user_ids.add(message.from_user.id)
    lang = user_language.get(message.from_user.id, "ru")
    text = (
        "üí≥ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π ID –ø—Ä–∏–Ω—è—Ç ‚úÖ\n\n"
        "üîé –¢–µ–ø–µ—Ä—å –≤–Ω–µ—Å–∏ *—Ç–µ—Å—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç* –æ—Ç **1000‚ÇΩ**, —á—Ç–æ–±—ã –Ω–∞—à ü§ñ –ò–ò —É–≤–∏–¥–µ–ª —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Ç–≤–æ–µ–º—É —Å–µ—Ä–≤–µ—Ä—É üéØ\n\n"
        "üîê –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –º–æ–≥–ª–∞ –Ω–∞—á–∞—Ç—å –≤—ã–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ —Ç–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ –æ—à–∏–±–æ–∫ üß†‚ö°\n\n"
        "üìå –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëâ ¬´‚úÖ –Ø –ø–æ–ø–æ–ª–Ω–∏–ª¬ª"
    ) if lang == "ru" else (
        "üí≥ Great! Your ID is accepted ‚úÖ\n\n"
        "üîé Now make a *test deposit* of **1000‚ÇΩ**, so our ü§ñ AI can see your gaming account and connect to your server üéØ\n\n"
        "üîê This is necessary for the system to start giving you accurate signals without delays or errors üß†‚ö°\n\n"
        "üìå After deposit, press the button üëâ ¬´‚úÖ Confirm deposit¬ª"
    )
    await message.answer(text, reply_markup=deposit_menu)

# --- –ö–Ω–æ–ø–∫–∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å ---
@dp.message(lambda message: message.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def deposit_link(message: types.Message):
    await message.answer("üí∏ –ü–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç –∑–¥–µ—Å—å: https://1wilib.life/v3/aggressive-casino?p=as47")

# --- –Ø –ø–æ–ø–æ–ª–Ω–∏–ª ---
@dp.message(lambda message: message.text == "‚úÖ –Ø –ø–æ–ø–æ–ª–Ω–∏–ª")
async def confirm_deposit(message: types.Message):
    if message.from_user.id in user_ids:
        confirmed_users.add(message.from_user.id)
        lang = user_language.get(message.from_user.id, "ru")
        await message.answer(
            "‚úÖ –î–µ–ø–æ–∑–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã." if lang == "ru" else "‚úÖ Deposit confirmed! Now you can receive signals.",
            reply_markup=main_menu
        )
    else:
        lang = user_language.get(message.from_user.id, "ru")
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π ID!" if lang == "ru" else "‚ö†Ô∏è Please register and enter your ID first!"
        )

# --- –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª ---
@dp.message(lambda message: message.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
async def send_signal(message: types.Message):
    if message.from_user.id not in confirmed_users:
        lang = user_language.get(message.from_user.id, "ru")
        await message.answer(
            "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –∏ –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –Ø –ø–æ–ø–æ–ª–Ω–∏–ª¬ª!" if lang == "ru" else
            "‚ö†Ô∏è To receive signals, you must first deposit and press ¬´‚úÖ Confirm deposit¬ª!"
        )
        return

    folder_path = "screens"
    if not os.path.exists(folder_path):
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(folder_path, exist_ok=True)
        await message.answer("‚ö†Ô∏è –°–∫—Ä–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    files = os.listdir(folder_path)
    image_files = [f for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'))]

    if not image_files:
        await message.answer("‚ö†Ô∏è –°–∫—Ä–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ screens/")
        return

    selected_file = random.choice(image_files)
    file_path = os.path.join(folder_path, selected_file)

    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)

    try:
        photo = FSInputFile(file_path)
        await message.answer_photo(
            photo=photo,
            caption=f"üéØ –ö–æ–ª-–≤–æ –º–∏–Ω: 3\nüïê –í—Ä–µ–º—è: {moscow_time.strftime('%H:%M:%S')} (–ú–°–ö)\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å –∫–∞–∂–¥—É—é 5 –∏–≥—Ä—É —á—Ç–æ–± –Ω–µ –±—ã–ª–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –æ—Ç 1WIN üéØ"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def start_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
async def run_bot():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render
    flask_thread = threading.Thread(target=start_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    await run_bot()

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã 24/7...")
    asyncio.run(main())
